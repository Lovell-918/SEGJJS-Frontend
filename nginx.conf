#user  nobody;
worker_processes  auto;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
  worker_connections  1024;
}


http {
  include       mime.types;
  # 反向代理的集群
  upstream backend {
    server segjjs:9090;
  }
  default_type  application/octet-stream;

  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
  '$status $body_bytes_sent "$http_referer" '
  '"$http_user_agent" "$http_x_forwarded_for"';

  #access_log  logs/access.log  main;

  sendfile        on;
  #tcp_nopush     on;

  #keepalive_timeout  0;
  keepalive_timeout  65;

  gzip  on;

  proxy_cache_path /var/cache/nginx/cache levels=1:2 keys_zone=imgcache:100m inactive=1d max_size=2g;

  server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;

    #access_log  logs/host.access.log  main;
    # docker 日志输出位置
    access_log /dev/stdout;

    location / {
      root   /usr/share/nginx/html;
      index  index.html index.htm;
      try_files  $uri $uri/ /index.html;
    }

    # 反向代理代理配置
    location /api/ {
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_pass http://backend/api/;
    }

    location ~* ^.+\.(js|ico|gif|jpg|jpeg|png|html|htm)$ {
      root   /usr/share/nginx/html;
      log_not_found off;
      access_log off;
      expires 7d;
#      proxy_pass http://img.example.com ;
      proxy_cache imgcache;
      proxy_cache_valid 200 302 1d;
      proxy_cache_valid 404 5m;
      proxy_cache_valid any 1h;
      proxy_cache_use_stale error timeout invalid_header updating http_500 http_502 http_503 http_504;
    }

#    location /report.html {
#      alias /var/nginx/html/report.html;
#    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
      root   html;
    }
  }

}
